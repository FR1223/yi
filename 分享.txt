<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>互动阅读</title>
    <script src="https://cdn.tailwindcss.com"></script>         
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"      rel="stylesheet">
    <style>
    </style>
</head>
 
<body class="flex flex-col min-h-screen">
    <div class="flex-1 p-6">
        <h1 id="game-title" class="text-4xl text-center mb-2">您已进入游戏</h1>
        <p id="reading-note" class="text-center text-sm mb-6">请确保你已经浏览过并认可阅读须知</p>
        <div id="start-game-container" class="flex justify-center">
            <input type="text" id="user-name" placeholder="输入您的名字" class="p-2 border-2 border-gray-300 mr-2 bg-white">
            <input type="text" id="user-nickname" placeholder="输入您的昵称（请注意该昵称为男主和全NPC通用）" class="p-2 border-2 border-gray-300 mr-2 bg-white">
            <button id="start-game" class="button">开始游戏</button>
        </div>
        <div id="admin-panel" class="admin-panel mt-6 p-4 bg-white shadow-md">
            <h2 class="text-2xl mb-4">管理员控制面板</h2>
            <div id="copy-list" class="edit-section">
                <h3>副本管理</h3>
                <div class="flex">
                    <input type="text" id="new-copy-name" placeholder="新副本名称" class="compact-input flex-1">
                    <button id="add-copy" class="button mb-2">添加副本</button>
                </div>
                <div id="copy-edit-area"></div>
                <button id="save-copies" class="save-btn mt-2">保存副本设置</button>
            </div>
            <div id="main-article-and-options-edits" class="edit-section">
                <h3>文章与选项管理</h3>
                <div class="flex mb-2">
                    <select id="copy-select-for-article" class="compact-input mr-2">
                        <option value="">选择副本</option>
                    </select>
                    <input type="text" id="article-node-title" placeholder="文章节点标题" class="compact-input flex-1 mr-2">
                    <button id="add-article-node" class="button">添加文章节点</button>
                </div>
                <div id="article-node-edit-area"></div>
                <button id="save-articles" class="save-btn mt-2">保存文章设置</button>
                <button id="save-options" class="save-btn mt-2">保存选项设置</button>
            </div>
            <div id="forum-posts-edit" class="edit-section">
                <h3>论坛帖子编辑</h3>
                <div class="flex mb-2">
                    <input type="text" id="forum-post-title" placeholder="帖子标题" class="compact-input flex-1 mr-2">
                    <button id="add-forum-post" class="button">添加帖子</button>
                </div>
                <div id="forum-post-edit-area"></div>
                <button id="save-forum-posts" class="save-btn mt-2">保存帖子设置</button>
                <button id="save-replies" class="save-btn mt-2">保存回复设置</button>
            </div>
            <div class="flex space-x-2 mt-4">
                <button id="save-all-changes" class="button">保存所有更改</button>
                <button id="export-button" class="button" onclick="exportHtml()">导出HTML</button>
            </div>
            <button id="exit-admin-panel" class="button mt-4">退出管理员面板</button>
        </div>
        <div id="copy-selection" class="hidden mt-6 p-4 bg-white shadow-md">
            <h2 class="text-2xl mb-4">选择副本</h2>
            <div id="copy-buttons"></div>
            <p class="text-center text-sm mt-6">其余副本正在维护中，敬请期待</p>
        </div>
        <div id="main-article-container" class="main-article mt-6 p-4 bg-white shadow-md">
            <h2 id="article-title"></h2>
            <div id="article-content"></div>
        </div>
        <div id="option-container" class="hidden mt-6 p-4 bg-white shadow-md">
            <h3>请选择</h3>
            <div id="option-buttons"></div>
        </div>
        <div id="option-content-container" class="hidden mt-6 p-4 bg-white shadow-md">
            <div id="option-content-title" class="text-xl mb-2"></div>
            <div id="option-content-text"></div>
            <button id="back-to-article" class="button mt-4" onclick="backToArticle()">返回文章</button>
        </div>
        <button id="show-next-node" class="button mt-4" onclick="showNextNode()"><span class="pixel-heart"></span> 继续 <span class="pixel-heart"></span></button>
    </div>
    <div id="phone-icon" onclick="openPhoneScreen()">
        <i class="fa-solid fa-mobile-screen-button"></i>
    </div>
    <div id="load-save" class="fixed bottom-4 right-4">
        <button id="load-button" class="button" onclick="openLoadSaveModal()">读档</button>
    </div>
    <button id="restart-button" class="button" onclick="restartGame()">
        <i class="fa-solid fa-rotate-left"></i> 重启 
    </button>
    <div id="admin-login-modal">
        <h2>管理员登录</h2>
        <input type="password" id="admin-password" placeholder="输入管理员密码" class="mb-2 w-full">
        <button id="admin-login-button" class="button" onclick="loginAdmin()">登录</button>
    </div>
    <div id="admin-login-entry" class="main-ui-show">
        <input type="password" id="admin-login-input" placeholder="副本维修通道" onkeydown="checkAdminPassword(event)">
    </div>
    <div id="phone-screen">
        <button id="back-button" onclick="closePhoneScreen()">返回</button>
        <div id="forum-posts-list"></div>
    </div>
    <div id="load-save-modal">
        <h2>选择存档点</h2>
        <div id="save-points"></div>
        <div id="load-options">
            <button onclick="loadFromBeginning()" class="load-option-button">从头开始</button>
            <button onclick="loadFromLastSave()" class="load-option-button">从上次存档继续</button>
            <button onclick="loadFromNewNodes()" class="load-option-button">从新节点开始</button>
        </div>
        <button id="close-load-modal" class="button mt-4" onclick="closeLoadSaveModal()">关闭</button>
    </div>
    <div id="toast" class="toast"></div>
 
    <script>
        // 常量定义 
        const ADMIN_PASSWORD = '';
        const FORBIDDEN_WORDS = [
            '陆沉', '齐司礼', '夏鸣星', '萧逸', '查理苏', '顾时夜', '易遇', '柏源', '夏萧因', '祁煜', '秦彻', '夏以昼', '沈星回', '黎深', '路辰', '罗夏', '司岚', '艾因', '李泽言', '周棋洛', '许墨', '白起', '凌肖', '莫弈', '左然', '陆景和', '夏彦', '老公', '男朋友', '花城', '洛水河', '蓝忘机', '萧策安', '墨燃', '长庚', '郁敖', '邵群', '严准', '夏明朗', '冉青庄', '谢怜', '沈清秋', '魏无羡', '沈兰舟', '楚晚宁', '顾盼', '钟宛', '李程秀', '裴然', '陆臻', '季桢', '庄凡心', '沈多意', '丁汉白', '陆文', '沈若臻', '厚满', '裴听颂', '官应政', '陈治桥', '唐奕川', '梁思喆', '顾拙言', '戚时安', '纪慎语', '瞿燕庭', '项明章', '林西顾', '方觉夏', '任焱', '章永', '傅玉致', '曹烨', '汤素言', '周罪', '迟骋', '石凯', '原扬', '简隋英', '宋居寒', '洛羿', '乔苑林', '傅云宪', '林耀', '陶晓东', '萧刻', '陶淮南', '潘小卓', '顾青裴', '李玉', '何故', '温小辉', '梁承', '许苏', '关泽', '顾飞', '江添', '贺朝', '路星辞', '晏明修', '祁薄言', '瞿未予', '丁小伟', '方邵一', '檀童', '朗白', '蒋丞', '盛望', '谢俞', '段嘉衍', '周翔', '纪望', '沈伦', '周谨行', '原野', '范玉', '袁诚', '闻时', '周嘉鱼', '陆讽', '白新羽', '顾海', '周自珩', '祁醉', '黎朔', '秦以恒', '虞仲夜', '叶时意', '尘不到', '林遂水', '安折', '俞风城', '白洛因', '夏习清', '于场', '赵锦辛', '楚义', '荆鸣', '蒋俞之', '柏淮', '黄渡', '李月驰', '程非池', '姜影', '陈韵城', '汪昊廷', '江子夺', '商牧泉', '闻臻', '梁冬', '简松意', '骆闻舟', '唐裔', '叶钦', '池小池', '宁君延', '简辛', '程恪', '北齐', '闻小屿', '邱梦长', '游惑', '汤君赫', '余遥', '陈景深', '简草', '唐绪', '何初三', '步重华', '陆承', '御剑', '江迟景', '秦究', '杨煊', '时洛', '喻繁', '路柏沅', '唐错', '夏六一', '吴等', '许青舟', '屈方宁', '郑明英', '沈巍', '陆谦宁', '谢清呈', '苏泗', '朱煜', '阮南烛', '兰波', '贺平意', '池又麟', '裴昱', '简之', '赵云澜', '李玮', '贺子', '宁一宵', '乐知时', '林秋石', '白楚年', '荆璨', '池亦溪', '赵昀', '梵天', '姬越', '江醒', '宫丞', '沈植', '洛林远', '费辛', '言逸', '江停', '李决', '谢一鹭', '陆黎书', '卫敛', '林清明', '郁南', '许言', '俞寒', '俞仲夏', '陆上锦', '严', '应允承', '廖吉祥', '许青霄', '花卷', 'scarlet', '程博衍', '寇忱', '林元隅', '张臣扉', '秦满', '行聘', '周戎', '韩越', '梁烨', '傅延异', '池念', '项西', '霍然', '丁霁', '焦梅', '纪燃', '宁皇', '司南', '楚慈', '王滇', '戚屿', '奚山', '赢骄', '顾延舟', '肖彦', '陆封', '周末', '周游', '孟新堂', '陆时', '覃晨', '沈落', '顾矜', '景辞', '邵司', '洛知子', '卫骁', '杜敬之', '董桐', '沈识德', '楚瑜', '江初', '夏一洋', '沈意', '程景森', '林修承', '宣森', '顾烈', '梁祯', '祁骁', '景韶', '楼璟', '邱奕', '连洪', '李茂蓝', '易寒', '陈幸', '纪优', '狄其野', '祝云瑄', '白刃', '慕含章', '萧承钧', '边南', '沈庭未', '高坤', '辛弃', '楚明允', '慕容衍', '凌澈', '陆枫', '沈玦', '秦衡', '林静恒', '段明炀', '许少卿', '季明轩', '柏九', '苏世誉', '顾琪', '许荣舟', '盛民鸥', '夏侯淼', '江与绵', '陆必行', '星', '荧', '黎洛', '安鲤', '沈默', '林易', '苍霖', '程潜', '白柳', '云永昼', '谢时冶', '萧复暄', '许盛', '墨煌', '谢白', '沈清轩', '林嘉容', '李春', '严争鸣', '谢塔', '卫恒', '傅熙', '吕行雪', '邵湛', '顾定', '殷无书', '伊墨', '路柯桐', '聂维山', '霍临风', '张子剑', '林洲', '陈潮', '靳寒柏', '温客行', '段凌', '许未', '晏舒望', '费原', '易千阳', '容落云', '叶泰', '桑南', '苗嘉颜', '乔然', '周子舒', '陆修文', '陈远闻', '郑子安', '薛阳', '徐延', '宋远句', '林辰', '顾依凉', '顾见深', '宋瑜', '柏昌意', '方驰', '姜宜', '徐年', '玄悯', '贺停', '尹昭慧', '刑从连', '卫言梓', '沈清弦', '谢绶', '庞霜', '孙问渠', '陆黎', '程琛', '杨悠明', '丁以楠', '涂言', '夏如许', '严育豪', '谭渐', '林晰', '傅落根', '顾沉舟', '风堂', '江深', '少东家', '夏星程', '霍执潇', '顾沉白', '许其琛', '灵灵', '傅深', '江淮', '林萧然', '林水程', '贺海楼', '封路凛', '白瑾一', '易微', '宣玑', '燕续之', '窦寻', '刑炎', '周晖', '陆瀚', '段锐', '陆时琛', '付一杰', '蒋少琰', '许唐成', '盛灵渊', '顾晏', '徐西临', '秦放', '楚河', '裴容', '段琰', '孟钊', '付坤', '汪哲', '游重', '关鹤', '李东勋', '晏航', '贺朗', '傅清疏', '萨厄杨', '妙妙', '献献', '景欢', '易生良', '解临', '云耀泽', '林和西', '谢闻星', '张景', '初一', '杨卷', '沈莫意', '楚斯', '向淮之', '云方', '池青', '林朔', '夏希艾', '齐馨', '沈谓行', '顾焱', '戚枫', '蒋俐', '贺临舟', '晏子修', '隋灿浓', '纪锴', '谢澜', '江流深', '尹修竹', '叶九月', '于乐', '凌可', '陶思稚', '闻早川', '广陵王',  '景绍祥', '纪玲', '黎未都', '窦晨', '陆永丰', '喻争渡', '程延林', '梁渔', '林延', '秦灿', '骆艳南', '钟熠', '慕白', '闻锐鸣', '廖川', '小花卷', '汪明齐', '商阙', '严拓', '许惊蛰', '景元洲', '谢以津', '詹子延', '容眠', '阎鹤', '章寻', '柏胤', '应晏', '裴枚川', '郑斯琦', '李启屿', '昭然', '姜留岁', '谢重星', '魏不怀', '白晨', '叶含铮', '许知', '沈知遇', '宋向隅', '乔奉天', '贺灼', '郁岸', '贺道景', '秦钟越', '楚和', '沈昀', '陆明霄', '周枚', '叶语辰', '叶勉', '蒋亮', '殷承玉', '宁如深', '梁崇', '许缙云', '周其琛', '陈嘉予', '迟铮', '叶行洲', '禹修', '庄珊', '尹澈', '黎月', '薛恕', '李无廷', '宁亦惟', '万元', '邱峰', '方皓', '于途', '祁醒', '林菲', '苏佃意', '卫西', '路析', '李书意', '司台合', '林深', '黎非凡', '傅双林', '李迟舒', '周声', '周也', '苏诗', '胡宗子', '胡灵子', '白敬', '陆焕', '李既白', '霍福启', '楚昭', '沈抱山', '储钦白', '盛明雅', '陈其昭', '池雪焰', '悠然', '宋谨', '纪倩', '沈见青', '施长悬', '蒙烽', '滕止青', '徐琼璋', '魏惜', '陆嘉延', '沈干淮', '贺桥', '宋星澜', '阎澄', '李遇泽', '谢灵涯', '刘砚', '杜云生', '宋卿', '魏宁', '池明知', '叶天阳', '谢青奇', '沈凤来', '温简言', '李楚尧', '穆然', '陆文虎', '施言', '楚冰', '秦卫东', '宋天馨', '客玄', '谢然', '林出', '巫烛', '司辰', '易天', '乔晖', '黑诺', '柳辰风', '方黎', '徐知春', '翌风', '龙深', '谢池', '沈娇', '陆迟歌', '谢宾', '霍煜', '李景珑', '魏谦', '蔷薇', '梁锐希', '蓝田', '莫钦', '冬至', '谢星澜', '宴无师', '凌灼', '林见鹿', '李池', '孔鸿俊', '魏之远', '周琰', '崔莹', '宁知远', '叶少阳', '陆修远', '单鸣', '吴所渭', '时温', '林丹', '周旭', '李雨时', '江叙'
        ];
        let gameState = {
            userName: '',
            userNickname: '',
            currentCopy: null,
            currentArticleNode: null,
            currentOptionSelected: null,
            visitedNodes: [],
            savePoints: [],
            isGameStarted: false 
        };
 
        // 游戏数据存储 
        let gameData = {
            copies: [],
            articles: [],
            options: [],
            forumPosts: [],
            replies: []
        };

        function escapeHtml(unsafe) {
            return unsafe 
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function generateId() {
            // 时间戳（base36） + 随机数（base36），共9位ID 
            return Date.now().toString(36)  + Math.random().toString(36).slice(2,  5);
        }

 function replacePlaceholder(text) {
    if (!text || typeof text !== 'string') return text;
    
    // 核心替换逻辑（两行代码搞定）
    return text 
        .replace(/小某/g, gameState.userNickname  || gameState.userName  || '用户')
        .replace(/某某/g, gameState.userName  || '用户');
}

        function containsForbiddenWords(name) {
            const lowerName = name.toLowerCase(); 
            return FORBIDDEN_WORDS.some(word  => 
                lowerName.includes(word.toLowerCase()) 
            );
        }
 
        // 存储游戏数据版本 
        let gameDataVersion = 1;
 
        // DOM元素 
        const adminPanel = document.getElementById('admin-panel');         
        const phoneScreen = document.getElementById('phone-screen');         
        const forumPostsList = document.getElementById('forum-posts-list');         
        const copySelection = document.getElementById('copy-selection');         
        const copyButtons = document.getElementById('copy-buttons');         
        const mainArticleContainer = document.getElementById('main-article-container');         
        const optionContainer = document.getElementById('option-container');         
        const optionContentContainer = document.getElementById('option-content-container');         
        const articleTitle = document.getElementById('article-title');         
        const articleContent = document.getElementById('article-content');         
        const optionButtons = document.getElementById('option-buttons');         
        const optionContentTitle = document.getElementById('option-content-title');         
        const optionContentText = document.getElementById('option-content-text');         
        const showNextNodeBtn = document.getElementById('show-next-node');         
        const startGameContainer = document.getElementById('start-game-container');         
        const gameTitle = document.getElementById('game-title');         
        const readingNote = document.getElementById('reading-note');         
        const adminLoginEntry = document.getElementById('admin-login-entry');         
        const userNameInput = document.getElementById('user-name'); 
        const startGameBtn = document.getElementById('start-game'); 
        const restartButton = document.getElementById('restart-button'); 
 
        // 初始化游戏 
        function initGame() {
            loadGameData();
            setupEventListeners();
            updateUI();
            document.getElementById('phone-icon').style.display  = 'none';
        }
 
        // 设置事件监听器 
        function setupEventListeners() {
            // 开始游戏按钮 
            startGameBtn.addEventListener('click',  startGame);
      
            userNameInput.addEventListener('keydown',  function(e) {
                if (e.key  === 'Enter') startGame();
            });
            userNameInput.addEventListener('input',  function() {
                if (containsForbiddenWords(this.value.trim()))  {
                    this.style.borderColor  = 'red';
                } else {
                    this.style.borderColor  = '';
                }
            });
 
    document.getElementById('user-nickname').addEventListener('input',  function() {
        if (containsForbiddenWords(this.value.trim()))  {
            this.style.borderColor  = 'red';
            // 可扩展：添加错误提示音或动画 
        } else {
            this.style.borderColor  = '';
        }
    });
            
            // 管理员面板相关按钮 
            document.getElementById('add-copy').addEventListener('click',  addNewCopy);
            document.getElementById('save-copies').addEventListener('click',  saveCopies);
            document.getElementById('add-article-node').addEventListener('click',  addArticleNode);
            document.getElementById('save-articles').addEventListener('click',  saveArticles);
            document.getElementById('save-options').addEventListener('click',  saveOptions);
            document.getElementById('add-forum-post').addEventListener('click',  addForumPost);
            document.getElementById('save-forum-posts').addEventListener('click',  saveForumPosts);
            document.getElementById('save-replies').addEventListener('click',  saveReplies);
            document.getElementById('save-all-changes').addEventListener('click',  saveAllChanges);
            document.getElementById('exit-admin-panel').addEventListener('click',  exitAdminPanel);
            
            // 回车键开始游戏 
            userNameInput.addEventListener('keydown',  function(e) {
                if (e.key  === 'Enter') {
                    startGame();
                }
            });
            userNameInput.addEventListener('input',  function() {
                if (containsForbiddenWords(this.value.trim()))  {
                    this.style.borderColor  = 'red';
                } else {
                    this.style.borderColor  = '';
                }
            });
        }
 
        // 加载游戏数据 
        function loadGameData() {
            const savedData = localStorage.getItem('gameData'); 
            if (savedData) {
                try {
                    const parsedData = JSON.parse(savedData); 
                    if (parsedData.version  && parsedData.version  >= gameDataVersion) {
                        gameData = parsedData;
                    } else {
                        // 处理旧版本数据迁移 
                        migrateOldData(parsedData);
                    }
                } catch (e) {
                    console.error(' 加载游戏数据失败:', e);
                }
            }
            
            // 初始化副本选择下拉菜单 
            updateCopySelectForArticle();
        }
 
        // 更新UI 
        function updateUI() {
            // 更新副本选择界面 
            renderCopyButtons();
        }
 
        // 开始游戏 
        function startGame() {
            const userName = userNameInput.value.trim(); 
            const userNickname = document.getElementById('user-nickname').value.trim();  

            if (!userName) {
                showToast('请输入您的名字');
                return;
            }

            // 在此插入违禁词检查：
           if (containsForbiddenWords(userName) || containsForbiddenWords(userNickname)) {
                showToast('您输入的名字包含不被允许的内容，请重新输入');
                return;
            }
            
            document.getElementById('start-game-container').style.display  = 'none';

            gameState.userName  = userName;
            gameState.userNickname  = userNickname || userName; 
            gameState.isGameStarted  = true;
            
            // 隐藏开始界面元素 
            gameTitle.classList.add('hidden'); 
            readingNote.classList.add('hidden'); 
            startGameContainer.classList.add('hidden'); 
            adminLoginEntry.classList.add('hidden'); 
            
            // 显示副本选择界面 
            copySelection.classList.remove('hidden'); 
            
            // 显示重启按钮 
            restartButton.style.display  = 'block';

            // 启用手机图标
            document.getElementById('phone-icon').style.display  = 'block';

            // 添加游戏开始提示
            showToast('游戏已开始！点击右下角手机图标可以查看论坛');
        }
 
        // 选择副本 
        function selectCopy(copyId) {
            const selectedCopy = gameData.copies.find(c  => c.id  === copyId);
            if (!selectedCopy) return;
            
            gameState.currentCopy  = copyId;
            
            // 隐藏副本选择界面 
            copySelection.classList.add('hidden'); 
            
            // 显示文章容器 
            mainArticleContainer.classList.remove('main-article'); 
            mainArticleContainer.classList.remove('hidden'); 
            
            // 加载副本的第一个节点 
            loadFirstArticleNode();
        }
 
        // 加载副本的第一个文章节点 
        function loadFirstArticleNode() {
            const copyArticles = gameData.articles.filter(a  => a.copyId  === gameState.currentCopy); 
            if (copyArticles.length  === 0) {
                showToast('该副本没有可用的文章节点');
                return;
            }
            
            // 按order排序并获取第一个节点 
            copyArticles.sort((a,  b) => a.order  - b.order); 
            const firstNode = copyArticles[0];
            
            loadArticleNode(firstNode.id); 
        }
 
        // 加载文章节点 
        function loadArticleNode(nodeId) {
            const articleNode = gameData.articles.find(a  => a.id  === nodeId);
            if (!articleNode) return;
            
            gameState.currentArticleNode  = nodeId;
            gameState.currentOptionSelected  = null;
            
            // 记录访问过的节点 
            if (!gameState.visitedNodes.includes(nodeId))  {
                gameState.visitedNodes.push(nodeId); 
            }
            
            // 更新UI 
            articleTitle.textContent  = articleNode.title; 
            articleContent.innerHTML  = `<pre>${escapeHtml(replacePlaceholder(articleNode.content))}</pre>`; 
            
            // 隐藏选项内容容器 
            optionContentContainer.classList.add('hidden'); 
            
            // 显示选项容器 
            renderOptionsForNode(nodeId);
        }
 
        // 渲染节点的选项 
        function renderOptionsForNode(nodeId) {
            optionButtons.innerHTML  = '';
            
            const nodeOptions = gameData.options.filter(o  => o.articleNodeId  === nodeId);
            if (nodeOptions.length  === 0) {
                // 如果没有选项，直接显示"继续"按钮 
                showNextNodeBtn.style.display  = 'block';
                optionContainer.classList.add('hidden'); 
                return;
            }
            
            nodeOptions.forEach(option  => {
                const optionDiv = document.createElement('div'); 
                optionDiv.className  = 'option';
                optionDiv.textContent  = option.title; 
                optionDiv.addEventListener('click',  () => selectOption(option.id)); 
                optionButtons.appendChild(optionDiv); 
            });
            
            // 显示选项容器 
            optionContainer.classList.remove('hidden'); 
            showNextNodeBtn.style.display  = 'none';
        }
 
        // 选择选项 
        function selectOption(optionId) {
            const selectedOption = gameData.options.find(o  => o.id  === optionId);
            if (!selectedOption) return;
            
            gameState.currentOptionSelected  = optionId;
            
            // 更新UI 
            optionContentTitle.textContent  = selectedOption.title; 
            optionContentText.innerHTML  = `<pre>${escapeHtml(replacePlaceholder(selectedOption.content))}</pre>`; 

            // 隐藏选项容器，显示选项内容容器 
            optionContainer.classList.add('hidden'); 
            optionContentContainer.classList.remove('hidden'); 
            
            // 显示"继续"按钮 
            showNextNodeBtn.style.display  = 'block';
        }
 
        // 显示下一个节点 
        function showNextNode() {
            const currentArticle = gameData.articles.find(a  => a.id  === gameState.currentArticleNode); 
            if (!currentArticle) return;
            
            // 获取当前副本的所有文章节点并按order排序 
            const copyArticles = gameData.articles  
                .filter(a => a.copyId  === gameState.currentCopy) 
                .sort((a, b) => a.order  - b.order); 
            
            // 查找当前节点的下一个节点 
            const currentIndex = copyArticles.findIndex(a  => a.id  === gameState.currentArticleNode); 
            if (currentIndex < 0 || currentIndex >= copyArticles.length  - 1) {
                showToast('后续副本正在维修中，敬请期待');
                return;
            }
            
            const nextNode = copyArticles[currentIndex + 1];
            loadArticleNode(nextNode.id); 
        }
 
        // 返回到文章 
        function backToArticle() {
            optionContentContainer.classList.add('hidden'); 
            
            if (gameState.currentArticleNode)  {
                const articleNode = gameData.articles.find(a  => a.id  === gameState.currentArticleNode); 
                if (articleNode) {
                    renderOptionsForNode(articleNode.id); 
                }
            }
        }
 
        // 渲染副本按钮 
        function renderCopyButtons() {
            copyButtons.innerHTML  = '';
            
            gameData.copies.forEach(copy  => {
                const copyButton = document.createElement('button'); 
                copyButton.className  = 'button mb-2 w-full';
                copyButton.textContent  = copy.name; 
                copyButton.addEventListener('click',  () => selectCopy(copy.id)); 
                copyButtons.appendChild(copyButton); 
            });
        }
 
        // 更新文章副本选择下拉菜单 
        function updateCopySelectForArticle() {
            const copySelect = document.getElementById('copy-select-for-article'); 
            copySelect.innerHTML  = '<option value="">选择副本</option>';
            
            gameData.copies.forEach(copy  => {
                const option = document.createElement('option'); 
                option.value  = copy.id; 
                option.textContent  = copy.name; 
                copySelect.appendChild(option); 
            });
        }
 
        // 添加新副本 
        function addNewCopy() {
            const newCopyName = document.getElementById('new-copy-name').value.trim(); 
            if (!newCopyName) {
                showToast('请输入副本名称');
                return;
            }
            
            const newCopy = {
                id: generateId(),
                name: newCopyName 
            };
            
            gameData.copies.push(newCopy); 
            updateCopySelectForArticle();
            renderCopyEditArea();
            
            document.getElementById('new-copy-name').value  = '';
        }
 
        // 添加文章节点 
        function addArticleNode() {
            const copySelect = document.getElementById('copy-select-for-article'); 
            const nodeTitle = document.getElementById('article-node-title').value.trim(); 
            
            if (!copySelect.value)  {
                showToast('请选择副本');
                return;
            }
            
            if (!nodeTitle) {
                showToast('请输入节点标题');
                return;
            }
            
            const newNode = {
                id: generateId(),
                copyId: copySelect.value, 
                title: nodeTitle,
                content: '在此输入文章内容...',
                order: gameData.articles.filter(a  => a.copyId  === copySelect.value).length  + 1 
            };
            
            gameData.articles.push(newNode); 
            renderArticleNodeEditArea();
            
            document.getElementById('article-node-title').value  = '';
        }
 
        // 添加论坛帖子 
        function addForumPost() {
            const postTitle = document.getElementById('forum-post-title').value.trim(); 
            if (!postTitle) {
                showToast('请输入帖子标题');
                return;
            }
            
            const newPost = {
                id: generateId(),
                title: postTitle,
                content: '在此输入帖子内容...'
            };
            
            gameData.forumPosts.push(newPost); 
            renderForumPostEditArea();
            
            document.getElementById('forum-post-title').value  = '';
        }
 
        // 渲染副本编辑区域 
        function renderCopyEditArea() {
            const editArea = document.getElementById('copy-edit-area'); 
            editArea.innerHTML  = '';
            
            gameData.copies.forEach((copy,  index) => {
                const copyDiv = document.createElement('div'); 
                copyDiv.className  = 'edit-item';
                
                const titleInput = document.createElement('input'); 
                titleInput.type  = 'text';
                titleInput.value  = copy.name; 
                titleInput.className  = 'compact-input';
                titleInput.dataset.copyId  = copy.id; 
                titleInput.placeholder  = '副本名称';
                
                const deleteBtn = document.createElement('button'); 
                deleteBtn.className  = 'delete-btn';
                deleteBtn.textContent  = '删除';
                deleteBtn.addEventListener('click',  () => deleteCopy(copy.id)); 
                
                const controlsDiv = document.createElement('div'); 
                controlsDiv.className  = 'edit-controls';
                controlsDiv.appendChild(titleInput); 
                controlsDiv.appendChild(deleteBtn); 
                
                copyDiv.appendChild(controlsDiv); 
                editArea.appendChild(copyDiv); 
            });
        }
 
        // 渲染文章节点编辑区域 
        function renderArticleNodeEditArea() {
            const editArea = document.getElementById('article-node-edit-area'); 
            editArea.innerHTML  = '';
            
            const copySelect = document.getElementById('copy-select-for-article'); 
            if (!copySelect.value)  return;
            
            const copyArticles = gameData.articles  
                .filter(a => a.copyId  === copySelect.value) 
                .sort((a, b) => a.order  - b.order); 
            
            copyArticles.forEach(article  => {
                const articleDiv = document.createElement('div'); 
                articleDiv.className  = 'edit-item';
                
                const titleInput = document.createElement('input'); 
                titleInput.type  = 'text';
                titleInput.value  = article.title; 
                titleInput.className  = 'compact-input';
                titleInput.placeholder  = '节点标题';
                titleInput.dataset.articleId  = article.id; 
                
                const contentTextarea = document.createElement('textarea'); 
                contentTextarea.value  = article.content; 
                contentTextarea.className  = 'w-full mt-2';
                contentTextarea.rows  = 5;
                contentTextarea.dataset.articleId  = article.id; 
                
                const orderControls = document.createElement('div'); 
                orderControls.className  = 'node-order-controls mt-2';
                
                const orderLabel = document.createElement('span'); 
                orderLabel.textContent  = '顺序: ';
                
                const orderInput = document.createElement('input'); 
                orderInput.type  = 'number';
                orderInput.value  = article.order; 
                orderInput.className  = 'compact-input';
                orderInput.min  = '1';
                orderInput.dataset.articleId  = article.id; 
                
                const upBtn = document.createElement('button'); 
                upBtn.className  = 'button';
                upBtn.textContent  = '↑';
                upBtn.addEventListener('click',  () => moveArticleOrder(article.id,  -1));
                
                const downBtn = document.createElement('button'); 
                downBtn.className  = 'button';
                downBtn.textContent  = '↓';
                downBtn.addEventListener('click',  () => moveArticleOrder(article.id,  1));
                
                const deleteBtn = document.createElement('button'); 
                deleteBtn.className  = 'delete-btn ml-2';
                deleteBtn.textContent  = '删除';
                deleteBtn.addEventListener('click',  () => deleteArticleNode(article.id)); 
                
                const optionTitle = document.createElement('div'); 
                optionTitle.className  = 'option-title mt-2';
                optionTitle.textContent  = '选项:';
                
                const optionsDiv = document.createElement('div'); 
                optionsDiv.className  = 'option-edit-area';
                
                // 添加选项按钮 
                const addOptionBtn = document.createElement('button'); 
                addOptionBtn.className  = 'button mt-2';
                addOptionBtn.textContent  = '添加选项';
                addOptionBtn.addEventListener('click',  () => addNewOption(article.id)); 
                
                // 渲染选项 
                const articleOptions = gameData.options.filter(o  => o.articleNodeId  === article.id); 
                articleOptions.forEach(option  => {
                    const optionDiv = document.createElement('div'); 
                    optionDiv.className  = 'edit-item mt-2';
                    
                    const optionTitleInput = document.createElement('input'); 
                    optionTitleInput.type  = 'text';
                    optionTitleInput.value  = option.title; 
                    optionTitleInput.className  = 'compact-input';
                    optionTitleInput.placeholder  = '选项标题';
                    optionTitleInput.dataset.optionId  = option.id; 
                    
                    const optionContentTextarea = document.createElement('textarea'); 
                    optionContentTextarea.value  = option.content; 
                    optionContentTextarea.className  = 'w-full mt-2';
                    optionContentTextarea.rows  = 3;
                    optionContentTextarea.dataset.optionId  = option.id; 
                    optionContentTextarea.placeholder  = '选项内容';
                    
                    const optionDeleteBtn = document.createElement('button'); 
                    optionDeleteBtn.className  = 'delete-btn mt-2';
                    optionDeleteBtn.textContent  = '删除选项';
                    optionDeleteBtn.addEventListener('click',  () => deleteOption(option.id)); 
                    
                    optionDiv.appendChild(optionTitleInput); 
                    optionDiv.appendChild(optionContentTextarea); 
                    optionDiv.appendChild(optionDeleteBtn); 
                    optionsDiv.appendChild(optionDiv); 
                });
                
                orderControls.appendChild(orderLabel); 
                orderControls.appendChild(orderInput); 
                orderControls.appendChild(upBtn); 
                orderControls.appendChild(downBtn); 
                orderControls.appendChild(deleteBtn); 
                
                articleDiv.appendChild(titleInput); 
                articleDiv.appendChild(contentTextarea); 
                articleDiv.appendChild(orderControls); 
                articleDiv.appendChild(optionTitle); 
                articleDiv.appendChild(optionsDiv); 
                articleDiv.appendChild(addOptionBtn); 
                
                editArea.appendChild(articleDiv); 
            });
        }
 
        // 添加新选项 
        function addNewOption(articleNodeId) {
            const newOption = {
                id: generateId(),
                articleNodeId: articleNodeId,
                title: '新选项',
                content: '在此输入选项内容...'
            };
            
            gameData.options.push(newOption); 
            renderArticleNodeEditArea();
        }
 
        // 渲染论坛帖子编辑区域 
        function renderForumPostEditArea() {
            const editArea = document.getElementById('forum-post-edit-area'); 
            editArea.innerHTML  = '';
            
            gameData.forumPosts.forEach(post  => {
                const postDiv = document.createElement('div'); 
                postDiv.className  = 'edit-item';
                
                const titleInput = document.createElement('input'); 
                titleInput.type  = 'text';
                titleInput.value  = post.title; 
                titleInput.className  = 'compact-input';
                titleInput.placeholder  = '帖子标题';
                titleInput.dataset.postId  = post.id; 
                
                const contentTextarea = document.createElement('textarea'); 
                contentTextarea.value  = post.content; 
                contentTextarea.className  = 'w-full mt-2';
                contentTextarea.rows  = 5;
                contentTextarea.dataset.postId  = post.id; 
                contentTextarea.placeholder  = '帖子内容';
                
                const deleteBtn = document.createElement('button'); 
                deleteBtn.className  = 'delete-btn mt-2';
                deleteBtn.textContent  = '删除帖子';
                deleteBtn.addEventListener('click',  () => deleteForumPost(post.id)); 
                
                const repliesTitle = document.createElement('div'); 
                repliesTitle.className  = 'option-title mt-2';
                repliesTitle.textContent  = '楼中楼回复:';
                
                const repliesDiv = document.createElement('div'); 
                repliesDiv.className  = 'reply-edit-area mt-2';
                
                // 添加回复按钮 
                const addReplyBtn = document.createElement('button'); 
                addReplyBtn.className  = 'button mt-2';
                addReplyBtn.textContent  = '添加回复';
                addReplyBtn.addEventListener('click',  () => addNewReply(post.id)); 
                
                // 渲染回复 
                const postReplies = gameData.replies.filter(r  => r.postId  === post.id); 
                postReplies.forEach(reply  => {
                    const replyDiv = document.createElement('div'); 
                    replyDiv.className  = 'reply-item';
                    
                    const replyContentTextarea = document.createElement('textarea'); 
                    replyContentTextarea.value  = reply.content; 
                    replyContentTextarea.className  = 'w-full';
                    replyContentTextarea.rows  = 3;
                    replyContentTextarea.dataset.replyId  = reply.id; 
                    replyContentTextarea.placeholder  = '回复内容';
                    
                    const replyDeleteBtn = document.createElement('button'); 
                    replyDeleteBtn.className  = 'delete-btn mt-2';
                    replyDeleteBtn.textContent  = '删除回复';
                    replyDeleteBtn.addEventListener('click',  () => deleteReply(reply.id)); 
                    
                    replyDiv.appendChild(replyContentTextarea); 
                    replyDiv.appendChild(replyDeleteBtn); 
                    repliesDiv.appendChild(replyDiv); 
                });
                
                postDiv.appendChild(titleInput); 
                postDiv.appendChild(contentTextarea); 
                postDiv.appendChild(deleteBtn); 
                postDiv.appendChild(repliesTitle); 
                postDiv.appendChild(repliesDiv); 
                postDiv.appendChild(addReplyBtn); 
                
                editArea.appendChild(postDiv); 
            });
        }
 
        // 添加新回复 
        function addNewReply(postId) {
            const newReply = {
                id: generateId(),
                postId: postId,
                content: '在此输入回复内容...'
            };
            
            gameData.replies.push(newReply); 
            renderForumPostEditArea();
        }
 
        // 删除副本 
        function deleteCopy(copyId) {
            if (confirm('确定要删除此副本吗？所有相关文章和选项也将被删除！')) {
                gameData.copies  = gameData.copies.filter(c  => c.id  !== copyId);
                gameData.articles  = gameData.articles.filter(a  => a.copyId  !== copyId);
                
                // 删除相关选项 
                const articleIdsToDelete = gameData.articles.filter(a  => a.copyId  === copyId).map(a => a.id); 
                gameData.options  = gameData.options.filter(o  => !articleIdsToDelete.includes(o.articleNodeId)); 
                
                updateCopySelectForArticle();
                renderCopyEditArea();
                renderArticleNodeEditArea();
            }
        }
 
        // 删除文章节点 
        function deleteArticleNode(articleId) {
            if (confirm('确定要删除此文章节点吗？所有相关选项也将被删除！')) {
                gameData.articles  = gameData.articles.filter(a  => a.id  !== articleId);
                gameData.options  = gameData.options.filter(o  => o.articleNodeId  !== articleId);
                
                // 更新剩余节点的order 
                const remainingArticles = gameData.articles.filter(a  => {
                    return a.copyId  === gameData.articles.find(a  => a.id  === articleId)?.copyId;
                }).sort((a, b) => a.order  - b.order); 
                
                remainingArticles.forEach((article,  index) => {
                    article.order  = index + 1;
                });
                
                renderArticleNodeEditArea();
            }
        }
 
        // 删除选项 
        function deleteOption(optionId) {
            if (confirm('确定要删除此选项吗？')) {
                gameData.options  = gameData.options.filter(o  => o.id  !== optionId);
                renderArticleNodeEditArea();
            }
        }
 
        // 删除论坛帖子 
        function deleteForumPost(postId) {
            if (confirm('确定要删除此帖子吗？所有相关回复也将被删除！')) {
                gameData.forumPosts  = gameData.forumPosts.filter(p  => p.id  !== postId);
                gameData.replies  = gameData.replies.filter(r  => r.postId  !== postId);
                renderForumPostEditArea();
            }
        }
 
        // 删除回复 
        function deleteReply(replyId) {
            if (confirm('确定要删除此回复吗？')) {
                gameData.replies  = gameData.replies.filter(r  => r.id  !== replyId);
                renderForumPostEditArea();
            }
        }
 
        // 移动文章节点顺序 
        function moveArticleOrder(articleId, direction) {
            const article = gameData.articles.find(a  => a.id  === articleId);
            if (!article) return;
            
            const copyArticles = gameData.articles  
                .filter(a => a.copyId  === article.copyId) 
                .sort((a, b) => a.order  - b.order); 
            
            const currentIndex = copyArticles.findIndex(a  => a.id  === articleId);
            if (currentIndex < 0) return;
            
            const newIndex = currentIndex + direction;
            if (newIndex < 0 || newIndex >= copyArticles.length)  return;
            
            // 交换order值 
            const tempOrder = copyArticles[currentIndex].order;
            copyArticles[currentIndex].order = copyArticles[newIndex].order;
            copyArticles[newIndex].order = tempOrder;
            
            renderArticleNodeEditArea();
        }
 
        // 保存副本设置 
        function saveCopies() {
            const inputs = document.querySelectorAll('#copy-edit-area  input[type="text"]');
            inputs.forEach(input  => {
                const copyId = input.dataset.copyId; 
                const copy = gameData.copies.find(c  => c.id  === copyId);
                if (copy) {
                    copy.name  = input.value.trim(); 
                }
            });
            
            saveGameData();
            showToast('副本设置已保存');
        }
 
        // 保存文章设置 
        function saveArticles() {
            const articleInputs = document.querySelectorAll('#article-node-edit-area  input[type="text"]');
            const contentTextareas = document.querySelectorAll('#article-node-edit-area  textarea');
            const orderInputs = document.querySelectorAll('#article-node-edit-area  input[type="number"]');
            
            articleInputs.forEach(input  => {
                const articleId = input.dataset.articleId; 
                const article = gameData.articles.find(a  => a.id  === articleId);
                if (article) {
                    article.title  = input.value.trim(); 
                }
            });
            
            contentTextareas.forEach(textarea  => {
                const articleId = textarea.dataset.articleId; 
                const article = gameData.articles.find(a  => a.id  === articleId);
                if (article) {
                    article.content  = textarea.value; 
                }
            });
            
            orderInputs.forEach(input  => {
                const articleId = input.dataset.articleId; 
                const article = gameData.articles.find(a  => a.id  === articleId);
                if (article) {
                    const newOrder = parseInt(input.value); 
                    if (!isNaN(newOrder) && newOrder > 0) {
                        article.order  = newOrder;
                    }
                }
            });
            
            // 重新排序以确保order连续 
            const copySelect = document.getElementById('copy-select-for-article'); 
            if (copySelect.value)  {
                const copyArticles = gameData.articles  
                    .filter(a => a.copyId  === copySelect.value) 
                    .sort((a, b) => a.order  - b.order); 
                
                copyArticles.forEach((article,  index) => {
                    article.order  = index + 1;
                });
            }
            
            saveGameData();
            showToast('文章设置已保存');
        }
 
        // 保存选项设置 
        function saveOptions() {
            const optionTitleInputs = document.querySelectorAll('#article-node-edit-area  .option-edit-area input[type="text"]');
            const optionContentTextareas = document.querySelectorAll('#article-node-edit-area  .option-edit-area textarea');
            
            optionTitleInputs.forEach(input  => {
                const optionId = input.dataset.optionId; 
                const option = gameData.options.find(o  => o.id  === optionId);
                if (option) {
                    option.title  = input.value.trim(); 
                }
            });
            
            optionContentTextareas.forEach(textarea  => {
                const optionId = textarea.dataset.optionId; 
                const option = gameData.options.find(o  => o.id  === optionId);
                if (option) {
                    option.content  = textarea.value; 
                }
            });
            
            saveGameData();
            showToast('选项设置已保存');
        }
 
        // 保存论坛帖子设置 
        function saveForumPosts() {
            const postTitleInputs = document.querySelectorAll('#forum-post-edit-area  input[type="text"]');
            const postContentTextareas = document.querySelectorAll('#forum-post-edit-area  textarea');
            
            postTitleInputs.forEach(input  => {
                const postId = input.dataset.postId; 
                const post = gameData.forumPosts.find(p  => p.id  === postId);
                if (post) {
                    post.title  = input.value.trim(); 
                }
            });
            
            postContentTextareas.forEach(textarea  => {
                const postId = textarea.dataset.postId; 
                const post = gameData.forumPosts.find(p  => p.id  === postId);
                if (post) {
                    post.content  = textarea.value; 
                }
            });
            
            saveGameData();
            showToast('论坛帖子设置已保存');
        }
 
        // 保存回复设置 
        function saveReplies() {
            const replyContentTextareas = document.querySelectorAll('#forum-post-edit-area  .reply-edit-area textarea');
            
            replyContentTextareas.forEach(textarea  => {
                const replyId = textarea.dataset.replyId; 
                const reply = gameData.replies.find(r  => r.id  === replyId);
                if (reply) {
                    reply.content  = textarea.value; 
                }
            });
            
            saveGameData();
            showToast('回复设置已保存');
        }
 
        // 保存所有更改 
        function saveAllChanges() {
            saveCopies();
            saveArticles();
            saveOptions();
            saveForumPosts();
            saveReplies();
            showToast('所有更改已保存');
        }
 
        // 保存游戏数据到本地存储 
        function saveGameData() {
            gameData.version  = gameDataVersion;
            localStorage.setItem('gameData',  JSON.stringify(gameData)); 
        }
 
        // 显示通知消息 
        function showToast(message) {
            const toast = document.getElementById('toast'); 
            toast.textContent  = message;
            toast.style.opacity  = '1';
            
            setTimeout(() => {
                toast.style.opacity  = '0';
            }, 3000);
        }
 
        // 生成唯一ID 
        function generateId() {
            return Date.now().toString(36)  + Math.random().toString(36).substr(2); 
        }
 
        // 打开手机屏幕 
function openPhoneScreen() {
    // 添加检查：只有游戏开始后才能打开手机 
    if (!gameState.isGameStarted)  {
        showToast('请先开始游戏');
        return;
    }

    phoneScreen.style.display  = 'block';
    showForumList(); // 改为调用showForumList而不是直接renderForumPosts 
}
 
        // 关闭手机屏幕 
function closePhoneScreen() {
    // 新增判断：如果在帖子详情页，则返回论坛列表 
    const postDetail = document.querySelector('.forum-post-detail[style="display:block;"]'); 
    if(postDetail) {
        showForumList();
        return;
    }
    
    // 否则才真正关闭手机屏幕 
    phoneScreen.style.display  = 'none';
}
 
function showForumList() {
    renderForumPosts();
    // 确保返回按钮可见 
    document.getElementById('back-button').style.display  = 'block';
}
 
        // 渲染论坛帖子 
function renderForumPosts() {
    forumPostsList.innerHTML  = `
        <div id="forum-posts-container"></div>
    `;
    
    const container = document.getElementById('forum-posts-container'); 
    
    gameData.forumPosts.forEach(post  => {
        const postDiv = document.createElement('div'); 
        postDiv.className  = 'forum-post';
        
        // 帖子标题（可点击）
        const titleDiv = document.createElement('div'); 
        titleDiv.className  = 'forum-post-title';
        titleDiv.textContent  = replacePlaceholder(post.title); 
        titleDiv.addEventListener('click',  () => showPostDetail(post.id)); 
        
        // 帖子内容预览 
        const previewDiv = document.createElement('div'); 
        previewDiv.className  = 'forum-post-preview';
        previewDiv.innerHTML  = `<pre>${escapeHtml(replacePlaceholder(post.content))}</pre>`; 
        
        postDiv.appendChild(titleDiv); 
        postDiv.appendChild(previewDiv); 
        container.appendChild(postDiv); 
    });
    
    // 添加返回按钮 
    const backBtn = document.createElement('button'); 
    backBtn.id  = 'back-to-forum-list';
    backBtn.textContent  = '返回列表';
    backBtn.addEventListener('click',  showForumList);
    forumPostsList.appendChild(backBtn); 
}
 
// 新增函数：显示帖子详情 
function showPostDetail(postId) {
    const post = gameData.forumPosts.find(p  => p.id  === postId);
    if (!post) return;
 
    forumPostsList.innerHTML  = `
        <div style="margin-top: 18px;"> <!-- 新增外层容器增加顶部间距 -->
            <h2 style="margin-left: 12px;">${replacePlaceholder(post.title)}</h2> 
            <div class="forum-post-detail" style="display:block;">
                <pre>${escapeHtml(replacePlaceholder(post.content))}</pre> 
                <div id="post-replies"></div>
            </div>
        </div>
    `;
    
    // 渲染回复 
    const repliesDiv = document.getElementById('post-replies'); 
    const replies = gameData.replies.filter(r  => r.postId  === postId);
    
    if (replies.length  > 0) {
        repliesDiv.innerHTML  = '<h3>回复</h3>';
        replies.forEach(reply  => {
            const replyDiv = document.createElement('div'); 
            replyDiv.className  = 'reply';
            replyDiv.innerHTML  = `<pre>${escapeHtml(replacePlaceholder(reply.content))}</pre>`; 
            repliesDiv.appendChild(replyDiv); 
        });
    }
    
    // 显示返回按钮 
    const backBtn = document.createElement('button'); 
    backBtn.id  = 'back-to-forum-list';
    backBtn.textContent  = '返回列表';
    backBtn.addEventListener('click',  showForumList);
    forumPostsList.appendChild(backBtn); 
}
 
// 新增函数：显示论坛列表 
function showForumList() {
    renderForumPosts();
}
 
        // 打开加载存档模态框 
        function openLoadSaveModal() {
            const modal = document.getElementById('load-save-modal'); 
            modal.style.display  = 'block';
            renderSavePoints();
        }
 
        // 关闭加载存档模态框 
        function closeLoadSaveModal() {
            const modal = document.getElementById('load-save-modal'); 
            modal.style.display  = 'none';
        }
 
        // 渲染存档点 
        function renderSavePoints() {
            const savePointsDiv = document.getElementById('save-points'); 
            savePointsDiv.innerHTML  = '';
            
            if (gameState.savePoints.length  === 0) {
                savePointsDiv.innerHTML  = '<p>暂无存档</p>';
                return;
            }
            
            gameState.savePoints.forEach((save,  index) => {
                const saveDiv = document.createElement('div'); 
                saveDiv.className  = 'save-point';
                saveDiv.textContent  = `存档 ${index + 1}: ${save.timestamp}`; 
                saveDiv.addEventListener('click',  () => loadSavePoint(index));
                savePointsDiv.appendChild(saveDiv); 
            });
        }
 
        // 加载存档点 
        function loadSavePoint(index) {
            if (index >= 0 && index < gameState.savePoints.length)  {
                const save = gameState.savePoints[index]; 
                gameState = {...save.state}; 
                updateGameUI();
                closeLoadSaveModal();
                showToast('存档已加载');
            }
        }
 
        // 从头开始加载 
        function loadFromBeginning() {
            gameState = {
                userName: gameState.userName, 
                currentCopy: null,
                currentArticleNode: null,
                currentOptionSelected: null,
                visitedNodes: [],
                savePoints: [],
                isGameStarted: true 
            };
            
            updateGameUI();
            copySelection.classList.remove('hidden'); 
            mainArticleContainer.classList.add('hidden'); 
            optionContainer.classList.add('hidden'); 
            optionContentContainer.classList.add('hidden'); 
            showNextNodeBtn.style.display  = 'none';
            closeLoadSaveModal();
            showToast('已从头开始游戏');
        }
 
        // 从上次存档继续 
        function loadFromLastSave() {
            if (gameState.savePoints.length  > 0) {
                loadSavePoint(gameState.savePoints.length  - 1);
            } else {
                showToast('没有找到存档');
            }
        }
 
        // 从新节点开始 
        function loadFromNewNodes() {
            if (gameState.currentCopy)  {
                loadFirstArticleNode();
                closeLoadSaveModal();
                showToast('已从新节点开始游戏');
            } else {
                showToast('请先选择副本');
            }
        }
 
        // 更新游戏UI 
        function updateGameUI() {
            if (gameState.currentArticleNode)  {
                loadArticleNode(gameState.currentArticleNode); 
            }
        }
 
        // 重启游戏 
        function restartGame() {
            if (confirm('确定要重启游戏吗？当前进度将丢失。')) {
                gameState = {
                    userName: '',
                    currentCopy: null,
                    currentArticleNode: null,
                    currentOptionSelected: null,
                    visitedNodes: [],
                    savePoints: [],
                    isGameStarted: false 
                };
                
                gameTitle.classList.remove('hidden'); 
                readingNote.classList.remove('hidden'); 
                startGameContainer.classList.remove('hidden'); 
                adminLoginEntry.classList.remove('hidden'); 
                copySelection.classList.add('hidden'); 
                mainArticleContainer.classList.add('hidden'); 
                optionContainer.classList.add('hidden'); 
                optionContentContainer.classList.add('hidden'); 
                showNextNodeBtn.style.display  = 'none';
                restartButton.style.display  = 'none';
                userNameInput.value  = '';

                document.getElementById('start-game-container').style.display  = 'block';
            }
        }

        // 管理员登录 
        function loginAdmin() {
            const password = document.getElementById('admin-password').value; 
            if (password === ADMIN_PASSWORD) {
                adminPanel.style.display  = 'block';
                document.getElementById('admin-login-modal').style.display  = 'none';
                
                // 初始化管理员面板 
                renderCopyEditArea();
                renderArticleNodeEditArea();
                renderForumPostEditArea();
                updateCopySelectForArticle();
            } else {
                showToast('密码错误');
            }
        }
 
        // 检查管理员密码 
        function checkAdminPassword(event) {
            if (event.key  === 'Enter') {
                const password = document.getElementById('admin-login-input').value; 
                if (password === ADMIN_PASSWORD) {
                    adminPanel.style.display  = 'block';
                    document.getElementById('admin-login-input').value  = '';
                    
                    // 初始化管理员面板 
                    renderCopyEditArea();
                    renderArticleNodeEditArea();
                    renderForumPostEditArea();
                    updateCopySelectForArticle();
                    
                    // 隐藏主界面元素 
                    gameTitle.classList.add('hidden'); 
                    readingNote.classList.add('hidden'); 
                    startGameContainer.classList.add('hidden'); 
                    adminLoginEntry.classList.add('hidden'); 
                    copySelection.classList.add('hidden'); 
                } else {
                    showToast('密码错误');
                }
            }
        }
 
        // 退出管理员面板 
        function exitAdminPanel() {
            adminPanel.style.display  = 'none';
            
            // 恢复主界面元素 
            if (!gameState.isGameStarted)  {
                gameTitle.classList.remove('hidden'); 
                readingNote.classList.remove('hidden');  
                startGameContainer.classList.remove('hidden'); 
                adminLoginEntry.classList.remove('hidden'); 
            } else {
                adminLoginEntry.classList.remove('hidden'); 
            }
        }
 
        // 处理旧数据迁移 
        function migrateOldData(oldData) {
            // 这里可以添加数据迁移逻辑 
            // 目前直接使用新版本数据结构 
            gameData = {
                copies: oldData.copies  || [],
                articles: oldData.articles  || [],
                options: oldData.options  || [],
                forumPosts: oldData.forumPosts  || [],
                replies: oldData.replies  || [],
                version: gameDataVersion 
            };
        }

function exportHtml() {
    // 1. 获取并处理LocalStorage数据 
    const savedData = localStorage.getItem('gameData'); 
    const sanitizedData = savedData ? JSON.stringify(JSON.parse(savedData))  : 'null';
    
    // 2. 创建iframe处理DOM 
    const iframe = document.createElement('iframe'); 
    iframe.style.display  = 'none';
    document.body.appendChild(iframe); 
    const iframeDoc = iframe.contentDocument  || iframe.contentWindow.document; 
    
    // 3. 克隆DOM并处理 
    iframeDoc.open(); 
    iframeDoc.write(document.documentElement.outerHTML  
        .replace('</head>', `<meta name="exported-html" content="true"></head>`));
    iframeDoc.close(); 
    
    // 4. 清理管理员相关元素 
    ['admin-panel', 'admin-login-modal', 'admin-login-entry'].forEach(id => {
        const el = iframeDoc.getElementById(id); 
        if(el) el.style.display  = 'none';
    });
    
    // 5. 添加初始化脚本 
    const initScript = iframeDoc.createElement('script'); 
    initScript.textContent  = `
        // 嵌入的游戏数据 
        const __EMBEDDED_GAME_DATA__ = ${sanitizedData};
        const __EMBEDDED_GAME_STATE__ = {
            userName: '',
            userNickname: '', 
            currentCopy: null,
            currentArticleNode: null,
            currentOptionSelected: null,
            visitedNodes: [],
            savePoints: [],
            isGameStarted: false 
        };
        
        // 修改初始化函数 
        const originalLoadGameData = window.loadGameData; 
        window.loadGameData  = function() {
            if (__EMBEDDED_GAME_DATA__) {
                try {
                    gameData = JSON.parse(JSON.stringify(__EMBEDDED_GAME_DATA__)); 
                    gameData.version  = ${gameDataVersion};
                } catch (e) {
                    console.error(' 加载嵌入数据失败:', e);
                    originalLoadGameData();
                }
            } else {
                originalLoadGameData();
            }
            updateCopySelectForArticle();
        };
        
        // 重置游戏状态 
        window.gameState  = JSON.parse(JSON.stringify(__EMBEDDED_GAME_STATE__)); 
        
        // 显示主界面 
        document.getElementById('game-title').classList.remove('hidden'); 
        document.getElementById('reading-note').classList.remove('hidden'); 
        document.getElementById('start-game-container').classList.remove('hidden'); 
        document.getElementById('admin-login-entry').classList.remove('hidden'); 
        
        // 重新绑定事件监听器 
        document.getElementById('start-game').addEventListener('click',  startGame);
        document.getElementById('user-name').addEventListener('keydown',  function(e) {
            if (e.key  === 'Enter') startGame();
        });
        
        // 初始化游戏 
        initGame();
    `;
    iframeDoc.body.appendChild(initScript); 
    
    // 6. 生成并下载HTML 
    const htmlContent = `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    ${iframeDoc.head.innerHTML.replace('<title> 互动阅读</title>', '<title>互动故事导出</title>')}
</head>
<body class="flex flex-col min-h-screen">
    ${iframeDoc.body.innerHTML} 
</body>
</html>`;
    
    // 7. 触发下载 
    const blob = new Blob([htmlContent], {type: 'text/html;charset=utf-8'});
    const url = URL.createObjectURL(blob); 
    const a = document.createElement('a'); 
    a.href  = url;
    a.download  = `互动故事_${new Date().toISOString().slice(0, 10)}.html`;
    a.click(); 
    
    // 8. 清理 
    setTimeout(() => {
        URL.revokeObjectURL(url); 
        document.body.removeChild(iframe); 
    }, 200);
}

        // 初始化游戏 
        initGame();
    </script>
</body>
</html>